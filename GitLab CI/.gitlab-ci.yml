# This file is a template, and might need editing before it works on your project.
image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/bokjo/test_edo

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME
  - go get -v -d ./...
  - go get -u github.com/golang/lint/golint

stages:
    - prepare
    - test
    - build
    - deploy

format:
    stage: prepare
    script:
      - go fmt $(go list ./... | grep -v /vendor/)
      - go vet $(go list ./... | grep -v /vendor/)

lint:
  stage: prepare
  script:
      - golint -set_exit_status $(go list ./... | grep -v /vendor/)
     
unit_tests:
  stage: test
  script:
      - go test -race $(go list ./... | grep -v /vendor/)

coverage:
  stage: test
  script:
      - echo "Go Test Coverage goes here..."      

compile:
    stage: build
    script:
      - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/edo-api
    artifacts:
      paths:
        - edo-api

deploy_staging:
  stage: deploy
  before_script:
    - echo "Skipping the global script"
  script:
    - 'echo -e "EDOAPI_USERNAME=$EDOAPI_USERNAME\nEDOAPI_PASSWORD=$EDOAPI_PASSWORD\nEDOAPI_DB=$EDOAPI_DB\nEDOAPI_HOST=$EDOAPI_HOST\nEDOAPI_PORT=$EDOAPI_PORT\n" > edo-api.conf'
    - 'ansible-playbook deploy/deploy-api.yml --extra-vars "artifact_path=$CI_PROJECT_DIR'
  tags:
    - ansible     
  environment:
    name: staging
    url: $EDO_STAGING_URL
  only:
  - master
  artifacts:
      paths:
        - edo-api
